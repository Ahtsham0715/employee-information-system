##########################      HOME PAGE START      ##########################

import sqlite3
from tkinter import *

def home_func():

    conn = sqlite3.connect('employees.db')
    print("Opened database successfully")

    conn.execute('''CREATE TABLE IF NOT EXISTS USERS
            (ID INTEGER PRIMARY KEY  AUTOINCREMENT NOT NULL,
            NAME           TEXT    NOT NULL,
            EMAIL            TEXT     NOT NULL,
            PHONE        TEXT,
            SALARY         TEXT,
            IMAGE       TEXT
            );''')
    print ("Table created successfully")
    conn.close()

    screen_height = 350
    screen_width = 500

    home = Tk()
    home.geometry('500x350')
    home.resizable(False, False)
    home.configure(bg='black')
    ######################## FRAME 1 ############################
    frame1 = Frame(home,height=screen_height *0.8, width= screen_width, bg= 'black')
    frame1.pack(side=TOP,  fill = BOTH, expand= YES)

    logo_path = PhotoImage(file='assets/SMALL_Iress_Logo.png')
    logo_path = logo_path.zoom(6)
    logo_path = logo_path.subsample(32)
    logo = Label(frame1, image= logo_path, width= screen_height * 0.7 , height= screen_height * 0.7, bg='black')
    logo.pack(side=LEFT, padx = 10)

    def open_func():
        home.destroy()
        import employees
        employees.employees_func()
    
    open_btn = Button(frame1, text='Open', bg='#3b1c47', fg='white',command=open_func)
    open_btn.pack(side = RIGHT, padx=50, ipadx=15)

    ######################## FRAME 2 ############################
    frame2 = Frame(home,height=screen_height *0.2, width= screen_width, bg= '#3b1c47')
    frame2.pack(side=BOTTOM, fill = BOTH, expand= YES)

    txt0 = Label(frame2, text='', fg = '#22eba3', bg = '#3b1c47', font=(18))
    txt0.pack(anchor='center', side=TOP)

    txt1 = Label(frame2, text='Employee Information', fg = '#22eba3', bg = '#3b1c47', font=('Arial',16))
    txt1.pack(anchor='center', side=TOP)

    txt2 = Label(frame2, text='System', fg = 'white', bg = '#3b1c47', font=('Arial',16,))
    txt2.pack(anchor='center',)

    home.mainloop()

home_func()


##########################      HOME PAGE END      ##########################


##########################      EMPLOYEES PAGE START      ##########################

import functools
import sqlite3
import tkinter as tk
from tkinter import messagebox
import tkinter.ttk as ttk
from tkinter.constants import *
from tkinter import *
import customtkinter as ctk
from login import login_func




screen_height = 350
screen_width = 500

def employees_func():

    class VerticalScrolledFrame(Frame):
        """A pure Tkinter scrollable frame that actually works!
        * Use the 'interior' attribute to place widgets inside the scrollable frame.
        * Construct and pack/place/grid normally.
        * This frame only allows vertical scrolling.
        """
        def __init__(self, parent, *args, **kw):
            Frame.__init__(self, parent, *args, **kw)

            # Create a canvas object and a vertical scrollbar for scrolling it.
            vscrollbar = Scrollbar(self, orient=VERTICAL)
            vscrollbar.pack(fill=Y, side=RIGHT, expand=True,anchor='sw')
            canvas = Canvas(self, bd=0, highlightthickness=0, bg='black',
                            yscrollcommand=vscrollbar.set)
            canvas.pack(side=LEFT, fill=BOTH, expand=TRUE)
            vscrollbar.config(command=canvas.yview)

            # Reset the view
            canvas.xview_moveto(0)
            canvas.yview_moveto(0)
            # Create a frame inside the canvas which will be scrolled with it.
            self.interior = interior = Frame(canvas, bg='black')
            interior_id = canvas.create_window(0, 0, window=interior,
                                            anchor=NW)

            # Track changes to the canvas and frame width and sync them,
            # also updating the scrollbar.
            def _configure_interior(event):
                # Update the scrollbars to match the size of the inner frame.
                size = (interior.winfo_reqwidth(), interior.winfo_reqheight())
                canvas.config(scrollregion="0 0 %s %s" % size)
                if interior.winfo_reqwidth() != canvas.winfo_width():
                    # Update the canvas's width to fit the inner frame.
                    canvas.config(width=interior.winfo_reqwidth())
            interior.bind('<Configure>', _configure_interior)

            def _configure_canvas(event):
                if interior.winfo_reqwidth() != canvas.winfo_width():
                    # Update the inner frame's width to fill the canvas.
                    canvas.itemconfigure(interior_id, width=canvas.winfo_width())
            canvas.bind('<Configure>', _configure_canvas)


    # if __name__ == "__main__":
        
    class SampleApp(tk.Tk):
        
        def __init__(self, *args, **kwargs):
            root = tk.Tk.__init__(self, *args, **kwargs)
            
            # screen_height = 350
            # screen_width = 500
            # self.geometry(f'{screen_width}x{screen_height}')
            # self.resizable(False, True)
            self.config(bg='black')
            self.usersdata = []
            self.usersimages = []
            def queryallusers():
                conn = sqlite3.connect('employees.db')
                rows = conn.execute("SELECT * FROM USERS")
                
                for row in rows:
                    self.usersdata.append(row)
                conn.close()
            try:
                queryallusers()
            except:
                pass
            self.title('Employees')
            self.configure(bg='black')
            ####################### FRAME 1 ############################
            self.frame1 = Frame(root,height=screen_height *0.15, width= screen_width, bg= '#3b1c47')
            self.frame1.pack(side=TOP,  fill = BOTH, expand= YES)

            self.logo_path = PhotoImage(file='assets/BIG_Iress_Logo.png')
            self.logo_path = self.logo_path.zoom(1)
            self.logo_path = self.logo_path.subsample(32)
            logo = Label(self.frame1, image= self.logo_path, width= screen_height * 0.1 , height= screen_height * 0.1, bg = '#3b1c47')
            logo.place(x=screen_width * 0.05, y=screen_height * 0.025)

            txt1 = Label(self.frame1, text='Employees', fg = '#22eba3', bg = '#3b1c47', font=('Arial',16))
            txt1.place(x=screen_width * 0.4, y=screen_height * 0.04)
            self.tempbtnlist = []
            
            def back_search():
                # global tempbtnlist
                r = 0
                c = 0
                self.search_btn.config(image=self.search_icon, command=search_func)
                for button in self.buttons:
                    button.grid_forget()
                for i in range(len(self.buttons)):
                    if c == 4:
                        c=0
                        r  += 1
                    self.buttons[i].grid(row = r+1, column = c+1, padx=15, pady=10, ipady = 20)
                    c += 1
                    
            def execute_search(uname):
                # global tempbtnlist
                print(uname)
                if uname == '':
                    pass
                elif uname == None:
                    pass
                else:
                    self.search_btn.config(image=self.back_search_icon, command=back_search)
                    for button in self.buttons:    
                        if not str(button['text']).startswith(uname):
                            # self.tempbtnlist.append(button)
                            button.grid_forget()
                        # self.buttons.remove()
               
                        

            def search_func():                
                execute_search(ctk.CTkInputDialog(self, title='Search User', text='Search By Username').get_input())
                    
            self.search_icon = PhotoImage(file=r"assets/Search_PNG.png")
            self.search_icon =self.search_icon.zoom(1)
            self.search_icon =self.search_icon.subsample(70)
            self.back_search_icon = PhotoImage(file=r"assets/Back_PNG.png")
            self.back_search_icon =self.back_search_icon.zoom(1)
            self.back_search_icon =self.back_search_icon.subsample(70)
            self.search_btn = Button(self.frame1 ,image=self.search_icon ,relief='flat',width= screen_height * 0.05 , height= screen_height * 0.05, bg = '#3b1c47', activebackground='#3b1c47',command=search_func)
            self.search_btn.place(x=screen_width * 0.8, y=screen_height * 0.04)
            
            
            def add_func():
                # import adduser
                self.withdraw()
                login_func(id=0,name=self, email='', phone='', salary='',pic='',isedit=False, isnewuser=True)
                # adduser.adduser_func()

            self.add_icon = PhotoImage(file=r"assets/Add_PNG.png")
            self.add_icon =self.add_icon.zoom(1)
            self.add_icon =self.add_icon.subsample(70)
            self.add_btn = Button(self.frame1 ,image=self.add_icon ,relief='flat',width= screen_height * 0.05 , height= screen_height * 0.05, bg = '#3b1c47', activebackground='#3b1c47', command= add_func)
            self.add_btn.place(x=screen_width * 0.9, y=screen_height * 0.04)
            
            self.frame = VerticalScrolledFrame(root, bg = 'black')
            self.frame.pack()
            # self.label = ttk.Label(self, text="Shrink the window to activate the scrollbar.")
            # self.label.pack()
            for i in self.usersdata:
                self.profilepic = PhotoImage(data=i[5])
                self.profilepic = self.profilepic.zoom(1)
                self.profilepic = self.profilepic.subsample(2)
                self.usersimages.append(self.profilepic)
            
            def do_popup(event,id, name, email, phone, salary, pic):
                self.m = Menu(root, tearoff = 0, bg='black', fg = 'white')
                # self.m.add_command(label ="Edit" ,background='black',foreground='white' ,command= functools.partial(edit_func, name, email, phone, salary, pic,))
                # self.m.add_separator()
                self.m.add_command(label ="Delete",background='black',foreground='white' , command= functools.partial(delete_profile,id=id, name=name, email=email,phone=phone,salary=salary,pic=pic))  
                try:
                    self.m.tk_popup(event.x_root, event.y_root)
                finally:
                    self.m.grab_release()
                
            def delete_profile(id,name, email, phone, salary, pic):
                global buttons, usersdata
                if(messagebox.askyesno('Are you sure?', 'Do you want to delete this user?')):
                    login_func(id,name, email, phone, salary, pic, isedit=False, isnewuser=False)
                    
                
            def btn_func(event,id,name, email, phone, salary, pic):
                import employee_profile
                self.withdraw()
                print(pic)
                employee_profile.elployeeprofile_func(id=id,name=name, email=email, phone=phone, salary=salary, pic=pic, self=self)
                
            self.buttons = []
            # var = dict()
            def creating_profiles():
                global buttons
                r = 0
                c = 0
                if len(self.usersdata) == 0:
                    Label(self.frame.interior, text='No Employee Available', fg = 'white',bg='black', font=('Arial',30)).pack(anchor = CENTER, pady=100, padx=35)
                else:
                    for i in range(len(self.usersdata)):
                        if c == 4:
                            c=0
                            r  += 1
                        # for j in range(4):
                        self.userprofile = Button(self.frame.interior,text=self.usersdata[i][1], compound='top',image= self.usersimages[i],relief='flat',width= screen_height * 0.25 , height= screen_height * 0.25, bg = 'black', activebackground='black', fg= 'white')
                        self.buttons.append(self.userprofile)
                        
                        # buttons.append(ttk.Button(self.frame.interior,image=self.profilepic, text="Button " + str(i)))
                        self.buttons[-1].grid(row = r+1, column = c+1, padx=15, pady=10, ipady = 20)
                        self.userprofile.bind('<Button-1>', functools.partial(btn_func, id=self.usersdata[i][0], name=self.usersdata[i][1], email=self.usersdata[i][2], phone=self.usersdata[i][3], salary=self.usersdata[i][4], pic=self.usersimages[i]))
                        self.userprofile.bind('<Button-3>', functools.partial(do_popup,id=self.usersdata[i][0], name=self.usersdata[i][1], email=self.usersdata[i][2], phone=self.usersdata[i][3], salary=self.usersdata[i][4], pic=self.usersimages[i]))
                        c += 1
            creating_profiles()
                

    app = SampleApp()
    app.mainloop()

##########################      EMPLOYEES PAGE END      ##########################

##########################      EMPLOYEE PROFILE PAGE START      ##########################

from tkinter import *
import customtkinter as ctk
import awesometkinter as atk

from login import login_func

def elployeeprofile_func(id,name, email, phone, salary, pic, self):

    screen_height = 350
    screen_width = 500

    employee_profile = Toplevel()
    employee_profile.geometry('500x350')
    employee_profile.resizable(False, False)
    employee_profile.configure(bg='black')
    employee_profile.title('Employees')



    ######################## FRAME 1 ############################
    frame1 = Frame(employee_profile,height=screen_height *0.25, width= screen_width, bg= '#3b1c47')
    frame1.pack(side=TOP,  fill = BOTH, expand= YES)

    username = Label(frame1, text=name, fg = '#22eba3', bg = '#3b1c47', font=('Arial',30))
    username.place(x=screen_width * 0.45, y=screen_height * 0.06)

    def back_func():
        employee_profile.destroy()
        self.deiconify()

    back_icon = PhotoImage(file=r"assets/Back_PNG.png")
    back_icon =back_icon.zoom(1)
    back_icon =back_icon.subsample(70)
    back_btn = Button(frame1 ,image=back_icon ,relief='flat',width= screen_height * 0.05 , height= screen_height * 0.05, bg = '#3b1c47', activebackground='#3b1c47', command = back_func)
    back_btn.place(x=screen_width * 0.92, y=screen_height * 0.04)



    ######################## FRAME 2 ############################
    frame2 = Frame(employee_profile,height=screen_height *0.75, width= screen_width, bg= 'black')
    frame2.pack(side=BOTTOM, fill = BOTH, expand= YES,)

    logo_path = PhotoImage(file='assets/SMALL_Iress_Logo.png')
    logo_path = logo_path.zoom(1)
    logo_path = logo_path.subsample(15)
    logo = Label(frame2, image= logo_path, width= screen_height * 0.25 , height= screen_height * 0.25, bg = 'black')
    logo.place(x=screen_width * 0.1, y=screen_height * 0.4)

    email_icon_path = PhotoImage(file='assets/Email_PNG.png')
    email_icon_path = email_icon_path.zoom(1)
    email_icon_path = email_icon_path.subsample(55)
    email_icon = Label(frame2, image= email_icon_path, width= screen_height * 0.1 , height= screen_height * 0.1, bg = 'black')
    email_icon.place(x=screen_width * 0.35, y=screen_height * 0.05)

    useremail = Label(frame2, text=email, fg = '#22eba3', bg = 'black', font=('Arial',16))
    useremail.place(x=screen_width * 0.45, y=screen_height * 0.06)

    phone_icon_path = PhotoImage(file='assets/Phone_PNG.png')
    phone_icon_path = phone_icon_path.zoom(1)
    phone_icon_path = phone_icon_path.subsample(55)
    phone_icon = Label(frame2, image= phone_icon_path, width= screen_height * 0.1 , height= screen_height * 0.1, bg = 'black')
    phone_icon.place(x=screen_width * 0.35, y=screen_height * 0.21)

    useremail = Label(frame2, text=phone, fg = '#22eba3', bg = 'black', font=('Arial',16))
    useremail.place(x=screen_width * 0.45, y=screen_height * 0.22)

    # salary_icon_path = PhotoImage(file='assets/Salary_PNG.png')
    # salary_icon_path = salary_icon_path.zoom(1)
    # salary_icon_path = salary_icon_path.subsample(55)
    # salary_icon = Label(frame2, image= salary_icon_path, width= screen_height * 0.1 , height= screen_height * 0.1, bg = 'black')
    # salary_icon.place(x=screen_width * 0.35, y=screen_height * 0.36)

    # usersalary = Label(frame2, text=salary, fg = '#22eba3', bg = 'black', font=('Arial',16))
    # usersalary.place(x=screen_width * 0.45, y=screen_height * 0.37)

    def edit_func():
        login_func(id,name, email, phone, salary,pic,isedit=True, isnewuser=False)
        # ctk.CTkInputDialog(master=frame2, title='Authenticate',text='Login')
        # print(atk.dialog.filechooser(initialdir='assets/'))

    edit_btn = Button(frame2, text='Edit', bg='#3b1c47',activebackground='#3b1c47', activeforeground='white', fg='white',font=('Arial',15),padx=15, command=edit_func)
    edit_btn.place(x=screen_width * 0.55, y=screen_height * 0.5)

    # profile_pic_path = PhotoImage(data=pic)
    # profile_pic_path = profile_pic_path.zoom(1)
    # profile_pic_path = profile_pic_path.subsample(1)
    profile_pic = Label(employee_profile, image= pic, bg = '#3b1c47')
    profile_pic.place(x=screen_width * 0.03, y=screen_height * 0.03)

    employee_profile.mainloop()

##########################      EMPLOYEE PROFILE PAGE END      ##########################

##########################      ADDUSER PAGE START      ##########################

from asyncio.windows_events import NULL
from tkinter import *
from tkinter import *
from tkinter import messagebox
from tkinter import filedialog
import awesometkinter as atk
import sqlite3
import base64
def adduser_func():

    screen_height = 350
    screen_width = 500

    adduser = Tk()
    adduser.geometry('500x350')
    adduser.resizable(False, False)
    adduser.configure(bg='black')
    adduser.title('Add Employee')



    ######################## FRAME 1 ############################
    frame1 = Frame(adduser,height=screen_height *0.25, width= screen_width, bg= '#3b1c47')
    frame1.pack(side=TOP,  fill = BOTH, expand= YES)

    usernamevar = StringVar()
    usernamevar.set('username')
    username = Entry(frame1, textvariable= usernamevar, fg = '#22eba3', bg = '#3b1c47', font=('Arial',12))
    username.place(x=screen_width * 0.45, y=screen_height * 0.07)

    def back_func():
        import employees
        adduser.destroy()
        employees.employees_func()

    back_icon = PhotoImage(file=r"assets/Back_PNG.png")
    back_icon =back_icon.zoom(1)
    back_icon =back_icon.subsample(70)
    back_btn = Button(frame1 ,image=back_icon ,relief='flat',width= screen_height * 0.05 , height= screen_height * 0.05, bg = '#3b1c47', activebackground='#3b1c47', command=back_func)
    back_btn.place(x=screen_width * 0.92, y=screen_height * 0.04)



    ######################## FRAME 2 ############################
    frame2 = Frame(adduser,height=screen_height *0.75, width= screen_width, bg= 'black')
    frame2.pack(side=BOTTOM, fill = BOTH, expand= YES,)

    logo_path = PhotoImage(file='assets/SMALL_Iress_Logo.png')
    logo_path = logo_path.zoom(1)
    logo_path = logo_path.subsample(15)
    logo = Label(frame2, image= logo_path, width= screen_height * 0.25 , height= screen_height * 0.25, bg = 'black')
    logo.place(x=screen_width * 0.1, y=screen_height * 0.4)

    email_icon_path = PhotoImage(file='assets/Email_PNG.png')
    email_icon_path = email_icon_path.zoom(1)
    email_icon_path = email_icon_path.subsample(55)
    email_icon = Label(frame2, image= email_icon_path, width= screen_height * 0.1 , height= screen_height * 0.1, bg = 'black')
    email_icon.place(x=screen_width * 0.35, y=screen_height * 0.05)

    useremailvar = StringVar()
    useremail = Entry(frame2, textvariable=useremailvar, fg = '#22eba3', bg = 'black', font=('Arial',14))
    useremail.place(x=screen_width * 0.45, y=screen_height * 0.05)

    phone_icon_path = PhotoImage(file='assets/Phone_PNG.png')
    phone_icon_path = phone_icon_path.zoom(1)
    phone_icon_path = phone_icon_path.subsample(55)
    phone_icon = Label(frame2, image= phone_icon_path, width= screen_height * 0.1 , height= screen_height * 0.1, bg = 'black')
    phone_icon.place(x=screen_width * 0.35, y=screen_height * 0.21)

    userphonevar = StringVar()
    userphone = Entry(frame2, textvariable=userphonevar, fg = '#22eba3', bg = 'black', font=('Arial',14))
    userphone.place(x=screen_width * 0.45, y=screen_height * 0.21)

    salary_icon_path = PhotoImage(file='assets/Salary_PNG.png')
    salary_icon_path = salary_icon_path.zoom(1)
    salary_icon_path = salary_icon_path.subsample(55)
    salary_icon = Label(frame2, image= salary_icon_path, width= screen_height * 0.1 , height= screen_height * 0.1, bg = 'black')
    salary_icon.place(x=screen_width * 0.35, y=screen_height * 0.36)

    usersalaryvar = StringVar()
    usersalary = Entry(frame2, textvariable=usersalaryvar, fg = '#22eba3', bg = 'black', font=('Arial',14))
    usersalary.place(x=screen_width * 0.45, y=screen_height * 0.36)

    # imgpath = ''
    isimageselected = False
    selectedimagepath = ''

    def insert_user():
        global selectedimagepath
        with open(selectedimagepath, 'rb') as file:
            # Reads each character
            selectedimage = base64.b64encode(file.read())
            conn = sqlite3.connect('employees.db')
            conn.execute("INSERT INTO USERS (NAME,EMAIL,PHONE,SALARY,IMAGE) VALUES (?,?,?,?,?)", (usernamevar.get(),useremailvar.get(),userphonevar.get(),usersalaryvar.get(), selectedimage))
            conn.commit()
            conn.close()


    def submit_func():
        if(len(usernamevar.get()) == 0 or len(useremailvar.get()) == 0 or len(userphonevar.get()) == 0 or len(usersalaryvar.get()) == 0):
            messagebox.showerror('Error', 'Please fill all fields')
        else:
            # insert_user()
            try:
                insert_user()
                useremailvar.set('')
                usernamevar.set('')
                userphonevar.set('')
                usersalaryvar.set('')
                imgpath = PhotoImage(file='assets/dummy_icon.png')
                imgpath = imgpath.zoom(1)
                imgpath = imgpath.subsample(1)
                profile_pic.config(image=imgpath)
                messagebox.showinfo('success', 'user added successfully')
            except:
                messagebox.showerror('error', 'unable to save data')
    submit_btn = Button(frame2, text='Submit', bg='#3b1c47',activebackground='#3b1c47', activeforeground='white', fg='white',font=('Arial',15),padx=15, command=submit_func)
    submit_btn.place(x=screen_width * 0.55, y=screen_height * 0.6)

    imgpath = PhotoImage(file='assets/dummy_icon.png')
    imgpath = imgpath.zoom(1)
    imgpath = imgpath.subsample(1)
    profile_pic = Label(adduser, image= imgpath, width= screen_height * 0.4 , height= screen_height * 0.55, bg = '#3b1c47')
    profile_pic.place(x=screen_width * 0.03, y=screen_height * 0.05)  


    def img_func():
        global imgpath, isimageselected, selectedimagepath
        # imgpath = atk.dialog.filechooser(
        #     backend=[('png')]
        # )
        imgpath = filedialog.askopenfilename(filetypes=[("Image File",'.png')])
        if imgpath != '':
            selectedimagepath = imgpath
        else:
            selectedimagepath = 'assets/dummy_icon.png'
        print(imgpath)
        # print(str(imgpath).split('/')[5] + '/' + str(imgpath).split('/')[6])
        if not imgpath == '':
            isimageselected = True
            profile_pic_path = PhotoImage(file=imgpath)
            profile_pic_path = profile_pic_path.zoom(1)
            profile_pic_path = profile_pic_path.subsample(1)
            imgpath=profile_pic_path
            profile_pic.config(image=imgpath)
            # select_btn['state'] = DISABLED
        else:
            imgpath = PhotoImage(file='assets/dummy_icon.png')
            imgpath = imgpath.zoom(1)
            imgpath = imgpath.subsample(1)
            profile_pic.config(image=imgpath)
            


    select_btn = Button(frame2, text='Select Image', bg='black',activebackground='#3b1c47', activeforeground='white', fg='white',font=('Arial',8), command=img_func)
    select_btn.place(x=screen_width * 0.8, y=screen_height * 0.5)



    adduser.mainloop()
    
# adduser_func()

##########################      ADDUSER PAGE END      ##########################

##########################      LOGIN PAGE START      ##########################

import sqlite3
from tkinter import *
from tkinter import messagebox
import customtkinter as ctk

def login_func(id,name, email, phone, salary, pic, isedit, isnewuser):

    screen_height = 250
    screen_width = 400

    login = Toplevel()
    login.geometry('400x250')
    login.resizable(False, False)
    login.configure(bg='black')
    # login.title('Employees')

    ######################## FRAME 1 ############################
    frame1 = Frame(login, height=screen_height *0.1, width= screen_width, bg= '#3b1c47')
    frame1.pack(side=TOP,  fill = BOTH, expand= YES)


    username = Label(frame1, text='Authenticate', fg = '#22eba3', bg = '#3b1c47', font=('Arial',16))
    username.place(x=screen_width * 0.35, y=screen_height * 0.04)

    def back_func():
        if isnewuser:
            name.deiconify()
        login.destroy()

    edit_icon = PhotoImage(file=r"assets/Back_PNG.png")
    edit_icon =edit_icon.zoom(1)
    edit_icon =edit_icon.subsample(70)
    edit_btn = Button(frame1 ,image=edit_icon ,relief='flat',width= screen_height * 0.05 , height= screen_height * 0.05, bg = '#3b1c47', activebackground='#3b1c47', command=back_func)
    edit_btn.place(x=screen_width * 0.92, y=screen_height * 0.04)

    ######################## FRAME 2 ############################
    frame2 = Frame(login,height=screen_height *0.8, width= screen_width, bg= 'black')
    frame2.pack(side=BOTTOM, fill = BOTH, expand= YES,)

    passvar = StringVar()
    passvar.set('Password')
    def loginbtn_func():
        global isloggedin
        if passvar.get() == '1234':
            if isnewuser:
                import adduser
                login.destroy()
                name.destroy()
                adduser.adduser_func()
            if isedit:
                import edit_user
                login.destroy()
                edit_user.edituser_func(id,name, email, phone, salary, pic)
            else:
                try:
                    conn = sqlite3.connect('employees.db')
                    conn.execute("DELETE FROM USERS WHERE NAME=? AND EMAIL=?", (name,email))
                    conn.commit()
                    conn.close()
                    messagebox.showinfo('success','user deleted successfully')
                except:
                    messagebox.showerror('Try Again', 'Error while deleting user.')
        else:
            messagebox.showerror('Try Again', 'Invalid Password')
            # if isnewuser:
                # name.deiconify()

    pass_input = Entry(master=frame2,textvariable=passvar,fg='black',relief=FLAT, bg='grey')
    pass_input.place(x=screen_width * 0.37, y=screen_height * 0.3)
    login_btn = Button(frame2, text='Login', bg='#3b1c47',activebackground='#3b1c47', activeforeground='white', fg='white',font=('Arial',13),padx=10, command=loginbtn_func)
    login_btn.place(x=screen_width * 0.42, y=screen_height * 0.45)
    login.mainloop()

##########################      LOGIN PAGE END      ##########################

##########################      EDIT PAGE START      ##########################

from asyncio.windows_events import NULL
from tkinter import *
from tkinter import *
from tkinter import messagebox
from tkinter import filedialog
import awesometkinter as atk
import sqlite3
import base64
selectedimagepath = ''
def edituser_func(id,name, email, phone, salary, pic):

    screen_height = 350
    screen_width = 500

    edituser = Toplevel()
    edituser.geometry('500x350')
    edituser.resizable(False, False)
    edituser.configure(bg='black')
    edituser.title('Edit Employee')


    ######################## FRAME 1 ############################
    frame1 = Frame(edituser,height=screen_height *0.25, width= screen_width, bg= '#3b1c47')
    frame1.pack(side=TOP,  fill = BOTH, expand= YES)

    usernamevar = StringVar()
    usernamevar.set(name)
    username = Entry(frame1, textvariable= usernamevar, fg = '#22eba3', bg = '#3b1c47', font=('Arial',12))
    username.place(x=screen_width * 0.45, y=screen_height * 0.07)

    def back_func():
        # import employee_profile
        edituser.destroy()
        # employee_profile.elployeeprofile_func(id = 0,name=name, email=email, phone=phone, salary=salary, pic=pic, self='')

    back_icon = PhotoImage(file=r"assets/Back_PNG.png")
    back_icon =back_icon.zoom(1)
    back_icon =back_icon.subsample(70)
    back_btn = Button(frame1 ,image=back_icon ,relief='flat',width= screen_height * 0.05 , height= screen_height * 0.05, bg = '#3b1c47', activebackground='#3b1c47', command=back_func)
    back_btn.place(x=screen_width * 0.92, y=screen_height * 0.04)



    ######################## FRAME 2 ############################
    frame2 = Frame(edituser,height=screen_height *0.75, width= screen_width, bg= 'black')
    frame2.pack(side=BOTTOM, fill = BOTH, expand= YES,)

    logo_path = PhotoImage(file='assets/SMALL_Iress_Logo.png')
    logo_path = logo_path.zoom(1)
    logo_path = logo_path.subsample(15)
    logo = Label(frame2, image= logo_path, width= screen_height * 0.25 , height= screen_height * 0.25, bg = 'black')
    logo.place(x=screen_width * 0.1, y=screen_height * 0.4)

    email_icon_path = PhotoImage(file='assets/Email_PNG.png')
    email_icon_path = email_icon_path.zoom(1)
    email_icon_path = email_icon_path.subsample(55)
    email_icon = Label(frame2, image= email_icon_path, width= screen_height * 0.1 , height= screen_height * 0.1, bg = 'black')
    email_icon.place(x=screen_width * 0.35, y=screen_height * 0.05)

    useremailvar = StringVar()
    useremailvar.set(email)
    useremail = Entry(frame2, textvariable=useremailvar, fg = '#22eba3', bg = 'black', font=('Arial',14))
    useremail.place(x=screen_width * 0.45, y=screen_height * 0.05)

    phone_icon_path = PhotoImage(file='assets/Phone_PNG.png')
    phone_icon_path = phone_icon_path.zoom(1)
    phone_icon_path = phone_icon_path.subsample(55)
    phone_icon = Label(frame2, image= phone_icon_path, width= screen_height * 0.1 , height= screen_height * 0.1, bg = 'black')
    phone_icon.place(x=screen_width * 0.35, y=screen_height * 0.21)

    userphonevar = StringVar()
    userphonevar.set(phone)
    userphone = Entry(frame2, textvariable=userphonevar, fg = '#22eba3', bg = 'black', font=('Arial',14))
    userphone.place(x=screen_width * 0.45, y=screen_height * 0.21)

    salary_icon_path = PhotoImage(file='assets/Salary_PNG.png')
    salary_icon_path = salary_icon_path.zoom(1)
    salary_icon_path = salary_icon_path.subsample(55)
    salary_icon = Label(frame2, image= salary_icon_path, width= screen_height * 0.1 , height= screen_height * 0.1, bg = 'black')
    salary_icon.place(x=screen_width * 0.35, y=screen_height * 0.36)

    usersalaryvar = StringVar()
    usersalaryvar.set(salary)
    usersalary = Entry(frame2, textvariable=usersalaryvar, fg = '#22eba3', bg = 'black', font=('Arial',14))
    usersalary.place(x=screen_width * 0.45, y=screen_height * 0.36)

    imgpath = ''
    global selectedimagepath

    def update_user():
        global selectedimagepath
        if selectedimagepath != '':
            print('encoding... ')
            with open(selectedimagepath, 'rb') as file:
                # Reads each character
                selectedimage = base64.b64encode(file.read())
                conn = sqlite3.connect('employees.db')
                conn.execute("UPDATE USERS SET NAME = ?,EMAIL = ?,PHONE = ?,SALARY = ?,IMAGE=? WHERE ID=?", (usernamevar.get(),useremailvar.get(),userphonevar.get(),usersalaryvar.get(), selectedimage, id))
                conn.commit()
                conn.close()
                selectedimagepath = ''
        else:
            print('saving... ')
            conn = sqlite3.connect('employees.db')
            conn.execute("UPDATE USERS SET NAME=?,EMAIL=?,PHONE=?,SALARY=? WHERE ID=?", (usernamevar.get(),useremailvar.get(),userphonevar.get(),usersalaryvar.get(), id))
            conn.commit()
            conn.close()


    def submit_func():
        if(len(usernamevar.get()) == 0 or len(useremailvar.get()) == 0 or len(userphonevar.get()) == 0 or len(usersalaryvar.get()) == 0):
            messagebox.showerror('Error', 'Please fill all fields')
        else:
            # print(imgpath)
            # update_user()
            
            try:
                update_user()
                # useremailvar.set('')
                # usernamevar.set('')
                # userphonevar.set('')
                # usersalaryvar.set('')
                # imgpath = PhotoImage(file='assets/dummy_icon.png')
                # imgpath = imgpath.zoom(1)
                # imgpath = imgpath.subsample(1)
                # profile_pic.config(image=imgpath)
                messagebox.showinfo('success', 'user edited successfully')
            except:
                messagebox.showerror('error', 'unable to save data')
    submit_btn = Button(frame2, text='Submit', bg='#3b1c47',activebackground='#3b1c47', activeforeground='white', fg='white',font=('Arial',15),padx=15, command=submit_func)
    submit_btn.place(x=screen_width * 0.55, y=screen_height * 0.6)

    # imgpath = PhotoImage(data=pic)
    # imgpath = imgpath.zoom(1)
    # imgpath = imgpath.subsample(1)
    profile_pic = Label(edituser, image= pic, width= screen_height * 0.4 , height= screen_height * 0.55, bg = '#3b1c47')
    profile_pic.place(x=screen_width * 0.03, y=screen_height * 0.05)  


    def img_func():
        global imgpath, selectedimagepath
        imgpath = filedialog.askopenfilename(filetypes=[("Image File",'.png')])
        print(imgpath)
        if imgpath != '':
            selectedimagepath = imgpath
        else:
            selectedimagepath = ''
        # print(imgpath)
        # print(str(imgpath).split('/')[5] + '/' + str(imgpath).split('/')[6])
        if not imgpath == '':
            profile_pic_path = PhotoImage(file=imgpath)
            profile_pic_path = profile_pic_path.zoom(1)
            profile_pic_path = profile_pic_path.subsample(1)
            imgpath=profile_pic_path
            profile_pic.config(image=imgpath)
            # select_btn['state'] = DISABLED
        else:
            # imgpath = PhotoImage(data=pic)
            # imgpath = imgpath.zoom(1)
            # imgpath = imgpath.subsample(1)
            profile_pic.config(image=pic)
            


    select_btn = Button(frame2, text='Select Image', bg='black',activebackground='#3b1c47', activeforeground='white', fg='white',font=('Arial',8), command=img_func)
    select_btn.place(x=screen_width * 0.8, y=screen_height * 0.5)



    edituser.mainloop()
    
# adduser_func()

##########################      EDIT PAGE END      ##########################